<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Quake III Arena</title>
    <link rel="icon" sizes="16x16" type="image/png" href="">
    <link rel="icon" sizes="192x192" type="image/png" href="">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        :root {
            /* WebOS Inspired Dark Theme */
            --bg-color: #1a1a1c;
            --primary-ui-bg: #2c2c2e;
            --text-primary: #f5f5f7;
            --text-secondary: #86868b;
            --border-color: #424245;
            --accent-color: #007aff;
            --modal-bg: rgba(10, 10, 10, 0.5);
        }

        html, body {
            margin: 0;
            padding: 0;
            background-color: var(--bg-color);
            font-family: 'Inter', sans-serif;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
            overflow: hidden;
        }

        #viewport-frame {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            overflow: hidden;
        }

        .gui_container {
            text-align: left;
        }

        .gui_background {
            width: 100%;
            height: 100%;
            position: fixed;
            left: 0;
            top: 0;
            z-index: -1;
            background-size: contain;
            background-position: center;
            background-repeat: no-repeat;
            background-image: url("");
            opacity: 0.1;
        }

        /* --- Buttons --- */
        .icon-btn {
            position: fixed;
            width: 72px;
            height: 72px;
            cursor: pointer;
            background-color: var(--primary-ui-bg);
            background-size: 50%;
            background-position: center;
            background-repeat: no-repeat;
            border-radius: 20px;
            border: 1px solid var(--border-color);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.4);
            transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
            z-index: 100;
        }

        .icon-btn:hover {
            transform: translateY(-4px) scale(1.05);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.5);
        }

        .gui_start {
            left: 0;
            right: 0;
            bottom: 48vh;
            margin: 0 auto;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23f5f5f7'%3E%3Cpath d='M8 5v14l11-7z'/%3E%3C/svg%3E");
            background-position: center 52%;
        }

        .gui_upload {
            top: 20px;
            right: 20px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23f5f5f7'%3E%3Cpath d='M9 16h6v-6h4l-8-8-8 8h4v6zm-4 2h14v2H5v-2z'/%3E%3C/svg%3E");
        }

        .gui_download {
            display: none;
            top: 20px;
            right: 110px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23f5f5f7'%3E%3Cpath d='M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z'/%3E%3C/svg%3E");
        }

        .gui_controls_file {
            display: none;
        }

        /* --- Help Modal --- */
        .text-btn {
            position: fixed;
            left: 0; right: 0; bottom: 8vh;
            margin: 0 auto; padding: 8px 20px;
            font-size: 15px; font-weight: 600;
            color: var(--text-secondary);
            cursor: pointer; text-align: center;
            width: fit-content; transition: color 0.2s ease;
        }
        .text-btn:hover { color: var(--text-primary); }

        .modal-overlay {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background-color: var(--modal-bg);
            backdrop-filter: blur(8px);
            display: none; align-items: center;
            justify-content: center; z-index: 2000;
        }
        .modal-content {
            background-color: var(--primary-ui-bg);
            padding: 24px 32px; border-radius: 16px;
            border: 1px solid var(--border-color);
            box-shadow: 0 10px 40px rgba(0,0,0,0.5);
            width: 90%; max-width: 480px; position: relative;
        }
        .modal-content h2 { margin: 0 0 20px 0; font-size: 22px; color: var(--text-primary); text-align: center; }
        .modal-close {
            position: absolute; top: 10px; right: 15px;
            font-size: 28px; font-weight: 300;
            color: var(--text-secondary); cursor: pointer;
            transition: color 0.2s ease;
        }
        .modal-close:hover { color: var(--text-primary); }
        .modal-content p { color: var(--text-primary); font-size: 16px; line-height: 1.6; margin: 10px 0; }
        .modal-content .key { color: var(--text-primary); background-color: var(--border-color); padding: 2px 6px; border-radius: 4px; font-family: monospace; }

        .gui_email {
            position: fixed; right: 20px; bottom: 10px; font-size: 14px;
        }
        .gui_email a { text-decoration: none; color: var(--text-secondary); transition: color 0.2s ease; }
        .gui_email a:hover { color: var(--text-primary); text-decoration: underline; }

        /* --- Loading Spinner --- */
        .gui_loading {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            display: none; align-items: center;
            justify-content: center; z-index: 1000;
            background-color: var(--modal-bg);
            backdrop-filter: blur(5px);
        }
        .gui_loading[style*="block"] { display: flex !important; }
        .lds-spinner { color: white; display: inline-block; position: relative; width: 80px; height: 80px; }
        .lds-spinner div { transform-origin: 40px 40px; animation: lds-spinner 1.2s linear infinite; }
        .lds-spinner div:after { content: " "; display: block; position: absolute; top: 3px; left: 37px; width: 6px; height: 18px; border-radius: 20%; background: white; }
        .lds-spinner div:nth-child(1) { transform: rotate(0deg); animation-delay: -1.1s; }
        .lds-spinner div:nth-child(2) { transform: rotate(30deg); animation-delay: -1s; }
        .lds-spinner div:nth-child(3) { transform: rotate(60deg); animation-delay: -0.9s; }
        .lds-spinner div:nth-child(4) { transform: rotate(90deg); animation-delay: -0.8s; }
        .lds-spinner div:nth-child(5) { transform: rotate(120deg); animation-delay: -0.7s; }
        .lds-spinner div:nth-child(6) { transform: rotate(150deg); animation-delay: -0.6s; }
        .lds-spinner div:nth-child(7) { transform: rotate(180deg); animation-delay: -0.5s; }
        .lds-spinner div:nth-child(8) { transform: rotate(210deg); animation-delay: -0.4s; }
        .lds-spinner div:nth-child(9) { transform: rotate(240deg); animation-delay: -0.3s; }
        .lds-spinner div:nth-child(10) { transform: rotate(270deg); animation-delay: -0.2s; }
        .lds-spinner div:nth-child(11) { transform: rotate(300deg); animation-delay: -0.1s; }
        .lds-spinner div:nth-child(12) { transform: rotate(330deg); animation-delay: 0s; }
        @keyframes lds-spinner { 0% { opacity: 1; } 100% { opacity: 0; } }
    </style>
</head>
<body>
    <div id="viewport-frame"></div>
    <div class="gui_download icon-btn"></div>

    <div id="help-modal" class="modal-overlay">
        <div class="modal-content">
            <span class="modal-close">&times;</span>
            <h2>How to Play</h2>
            <p>Click the <span class="key">▶</span> button to start a new game with default settings.</p>
            <p>To use your own profile, click the <span class="key">↑</span> button and select your <span class="key">q3config.cfg</span> file. This will load your custom settings and start the game.</p>
        </div>
    </div>

    <div class="gui_container">
        <div class="gui_background"></div>
        <div class="gui_start icon-btn"></div>
        <div class="gui_upload icon-btn"></div>
        <div id="help-btn" class="text-btn">Help</div>
        <input type="file" id="gui_controls_file" class="gui_controls_file" onchange="readFile(event.target.files);">
    </div>
    <div class="gui_loading" id="loading">
        <div class="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
    </div>

    <script>
        // Restyled alertCustom.js to match WebOS theme
        function alertCustom(title, message, accept, callback) {
            try {
                var alertContainer = document.createElement("div");
                alertContainer.className = "modal-overlay";
                alertContainer.style.display = "flex";

                var alertForm = document.createElement("div");
                alertForm.className = "modal-content";

                var alertTitle = document.createElement("h2");
                alertTitle.innerHTML = title;

                var alertMessage = document.createElement("p");
                alertMessage.innerHTML = message;
                alertMessage.style.textAlign = "center";

                var alertButtonContainer = document.createElement("div");
                alertButtonContainer.style.textAlign = "center";
                alertButtonContainer.style.marginTop = "24px";

                var alertButton = document.createElement("button");
                alertButton.innerHTML = accept;
                alertButton.style.cssText = `
                    padding: 10px 40px;
                    border-radius: 8px;
                    border: none;
                    background-color: var(--accent-color);
                    color: var(--text-primary);
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                `;
                alertButton.onmouseover = function() { this.style.backgroundColor = '#0056b3'; };
                alertButton.onmouseout = function() { this.style.backgroundColor = 'var(--accent-color)'; };

                alertButton.addEventListener("click", function (event) {
                    callback();
                    document.body.removeChild(alertContainer);
                });

                alertForm.appendChild(alertTitle);
                alertForm.appendChild(alertMessage);
                alertButtonContainer.appendChild(alertButton);
                alertForm.appendChild(alertButtonContainer);
                alertContainer.appendChild(alertForm);
                document.body.appendChild(alertContainer);
                alertButton.focus();
            } catch (err) { }
        }

        var userLanguage = window.navigator.userLanguage || window.navigator.language;
        var STRING_ERROR_TITLE = "";
        var STRING_ERROR_MESSAGE = "";
        var STRING_ERROR_OK = "";
        var profileData = null;
        var CTRLS_IDLE = 0;

        if (userLanguage.substring(0, 2) == "es") {
            STRING_ERROR_TITLE = "MENSAJE";
            STRING_ERROR_MESSAGE = "Debe seleccionar el archivo<br/>q3config.cfg que contiene su<br/>perfil de Quake III Arena.";
            STRING_ERROR_OK = "Aceptar";
        } else {
            STRING_ERROR_TITLE = "MESSAGE";
            STRING_ERROR_MESSAGE = "You must select the q3config.cfg file. It has your Quake III Arena profile.";
            STRING_ERROR_OK = "OK";
        }

        function runQuake3() {
            try {
                document.getElementsByClassName("gui_container")[0].style.display = "none";
                document.getElementsByClassName("gui_loading")[0].style.display = "block";
                var quakeLoader = document.createElement("script");
                quakeLoader.onload = function () {
                    ioq3.viewport = document.getElementById("viewport-frame");
                    ioq3.elementPointerLock = true;
                    ioq3.exitHandler = function (err) {
                        if (err != null) { alert(err); }
                        location.reload();
                    }
                    ioq3.callMain();
                    document.getElementsByClassName("gui_loading")[0].style.display = "none";
                }
                quakeLoader.src = "/static/third-party/apps/quake3.app/Quake3.js";
                document.body.appendChild(quakeLoader);
            } catch (err) { }
        }

        function mouseChecker() {
            try { if (!ioq3) { return }; } catch (err) { return; }
            if (document.pointerLockElement == null) {
                goBackButtonResetIncrement();
            } else {
                goBackButtonTimerIncrement();
            }
        }

        function goBackButtonResetIncrement() {
            try {
                CTRLS_IDLE = 0;
                document.getElementsByClassName("gui_download")[0].style.display = "block";
            } catch (err) { }
        }

        function goBackButtonTimerIncrement() {
            try {
                CTRLS_IDLE = CTRLS_IDLE + 1;
                if (CTRLS_IDLE >= 3) {
                    document.getElementsByClassName("gui_download")[0].style.display = "none";
                }
            } catch (err) { }
        }

        function getProfileData() {
            if (profileData == null) { profileData = ""; }
            return profileData;
        }

        function clearProfileData() {
            profileData = null;
        }

        function downloadProfileData() {
            try {
                var rawReading = FS.readFile("/base/baseq3/q3config.cfg");
                var fileAsArray = new Uint8Array(rawReading);
                download_Blob(fileAsArray, "q3config.cfg", "application/octet-stream");
            } catch (err) { }
        }

        function download_Blob(data, fileName, mimeType) {
            var blob = new Blob([data], { type: mimeType });
            var url = window.URL.createObjectURL(blob);
            download_URL(url, fileName);
            setTimeout(function () {
                return window.URL.revokeObjectURL(url);
            }, 1000);
        }

        function download_URL(data, fileName) {
            var a;
            a = document.createElement("a");
            a.href = data;
            a.download = fileName;
            document.body.appendChild(a);
            a.style = "display: none";
            a.click();
            a.remove();
        }

        function readFile(files) {
            try {
                if (files[0].name.toLowerCase() == "q3config.cfg") {
                    var filereader = new FileReader();
                    filereader.file_name = files[0].name;
                    filereader.onload = function () {
                        profileData = this.result;
                        document.getElementById("gui_controls_file").value = null;
                        runQuake3();
                    };
                    filereader.readAsText(files[0]);
                } else {
                    document.getElementById("gui_controls_file").value = null;
                    alertCustom(STRING_ERROR_TITLE, STRING_ERROR_MESSAGE, STRING_ERROR_OK, function () { });
                }
            } catch (err) { }
        }

        window.addEventListener("load", function () {
            if (window.top != window.self) {
                document.getElementById("gui_controls_file").value = null;
                document.getElementsByClassName("gui_start")[0].addEventListener("click", function (event) { runQuake3() });
                document.getElementsByClassName("gui_upload")[0].addEventListener("click", function (event) { document.getElementById("gui_controls_file").click() });
                document.getElementsByClassName("gui_download")[0].addEventListener("click", function (event) { downloadProfileData() });
                setInterval(goBackButtonTimerIncrement, 1000);
                document.addEventListener("click", mouseChecker, false);
                document.addEventListener("dblclick", mouseChecker, false);
                document.addEventListener("mousemove", mouseChecker, false);
                document.addEventListener("pointerlockchange", mouseChecker, false);
                document.addEventListener("mozpointerlockchange", mouseChecker, false);
                document.addEventListener("webkitpointerlockchange", mouseChecker, false);
            }
        });

        window.addEventListener("resize", function () {
            try {
                if (!ioq3.canvas) { return }
                if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"])) { return }
                ioq3.setCanvasSize(ioq3.viewport.offsetWidth, io.q3.viewport.offsetHeight);
            } catch (err) { }
        });

        document.addEventListener('DOMContentLoaded', (event) => {
            const modal = document.getElementById('help-modal');
            const helpBtn = document.getElementById('help-btn');
            const closeBtn = modal.querySelector('.modal-close');
            const openModal = () => modal.style.display = 'flex';
            const closeModal = () => modal.style.display = 'none';
            helpBtn.addEventListener('click', openModal);
            closeBtn.addEventListener('click', closeModal);
            modal.addEventListener('click', (e) => { if (e.target === modal) { closeModal(); } });
        });
    </script>
</body>
</html>
