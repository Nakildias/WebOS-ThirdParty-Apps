<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>3D Pinball Space Cadet</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        :root {
            /* WebOS Inspired Dark Theme */
            --bg-color: #1a1a1c;
            --primary-ui-bg: #2c2c2e;
            --text-primary: #f5f5f7;
            --text-secondary: #86868b;
            --border-color: #424245;
            --accent-color: #007aff;
            --modal-bg: rgba(10, 10, 10, 0.5);
        }

        html, body {
            background-color: var(--bg-color);
            padding: 0;
            margin: 0;
            font-family: 'Inter', sans-serif;
            overflow: hidden;
        }

        canvas {
            position: fixed;
            left: 0;
            right: 0;
            top: -20px;
            bottom: 0;
            width: 100%;
        }

        .gui_container {
            position: fixed;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            background-color: var(--bg-color);
        }

        .gui_background {
            width: 100%;
            height: 100%;
            position: fixed;
            left: 0px;
            top: -60px;
            z-index: -1;
            background-size: 40% auto;
            background-position: center center;
            background-repeat: no-repeat;
            background-image: url("");
            opacity: 0.15;
        }

        .gui_email {
            position: fixed;
            right: 20px;
            top: 10px;
            font-size: 14px;
            font-weight: 500;
        }

        .gui_email a {
            text-decoration: none;
            color: var(--text-secondary);
            transition: color 0.2s ease-in-out;
        }

        .gui_email a:hover {
            color: var(--text-primary);
            text-decoration: underline;
        }

        .gui_start {
            position: fixed;
            left: 0;
            right: 0;
            bottom: 48vh;
            width: 80px;
            height: 80px;
            margin: 0 auto;
            cursor: pointer;
            background-color: var(--primary-ui-bg);
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23f5f5f7'%3E%3Cpath d='M8 5v14l11-7z'/%3E%3C/svg%3E");
            background-size: 45%;
            background-position: center 52%;
            background-repeat: no-repeat;
            border-radius: 20px;
            border: 1px solid var(--border-color);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.4);
            transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
        }

        .gui_start:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }

        /* --- NEW: Help button and Modal Styles --- */
        .text-btn {
            position: fixed;
            left: 0;
            right: 0;
            bottom: 8vh;
            margin: 0 auto;
            padding: 8px 20px;
            font-size: 15px;
            font-weight: 600;
            color: var(--text-secondary);
            cursor: pointer;
            text-align: center;
            width: fit-content;
            transition: color 0.2s ease;
        }

        .text-btn:hover {
            color: var(--text-primary);
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--modal-bg);
            backdrop-filter: blur(8px);
            display: none; /* Hidden by default */
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }

        .modal-content {
            background-color: var(--primary-ui-bg);
            padding: 24px 32px;
            border-radius: 16px;
            border: 1px solid var(--border-color);
            box-shadow: 0 10px 40px rgba(0,0,0,0.5);
            width: 90%;
            max-width: 480px;
            position: relative;
        }

        .modal-content h2 {
            margin: 0 0 20px 0;
            font-size: 22px;
            color: var(--text-primary);
            text-align: center;
        }

        .modal-close {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 28px;
            font-weight: 300;
            color: var(--text-secondary);
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .modal-close:hover {
            color: var(--text-primary);
        }

        .gui_controls {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .gui_controls li {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid var(--border-color);
            font-size: 16px;
        }

        .gui_controls li:last-child {
            border-bottom: none;
        }

        .gui_controls .gui_controls_key {
            color: var(--text-secondary);
            margin-right: 24px;
        }

        .gui_controls span:not(.gui_controls_key) {
            color: var(--text-primary);
            font-weight: 600;
        }

        /* --- Loading Spinner --- */
        .pleasewait {
            position: fixed;
            width: 100%;
            height: 100%;
            left: 0;
            top: 0;
            margin: auto;
            border: 0;
            display: none;
            background-color: var(--modal-bg);
            backdrop-filter: blur(5px);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        .pleasewait[style*="block"] {
            display: flex !important;
        }

        .lds-spinner {
            color: var(--text-primary);
            display: inline-block;
            position: relative;
            width: 80px;
            height: 80px;
        }

        .lds-spinner div {
            transform-origin: 40px 40px;
            animation: lds-spinner 1.2s linear infinite;
        }

        .lds-spinner div:after {
            content: " ";
            display: block;
            position: absolute;
            top: 3px;
            left: 37px;
            width: 6px;
            height: 18px;
            border-radius: 20%;
            background: var(--text-primary);
        }

        .lds-spinner div:nth-child(1) { transform: rotate(0deg); animation-delay: -1.1s; }
        .lds-spinner div:nth-child(2) { transform: rotate(30deg); animation-delay: -1.0s; }
        .lds-spinner div:nth-child(3) { transform: rotate(60deg); animation-delay: -0.9s; }
        .lds-spinner div:nth-child(4) { transform: rotate(90deg); animation-delay: -0.8s; }
        .lds-spinner div:nth-child(5) { transform: rotate(120deg); animation-delay: -0.7s; }
        .lds-spinner div:nth-child(6) { transform: rotate(150deg); animation-delay: -0.6s; }
        .lds-spinner div:nth-child(7) { transform: rotate(180deg); animation-delay: -0.5s; }
        .lds-spinner div:nth-child(8) { transform: rotate(210deg); animation-delay: -0.4s; }
        .lds-spinner div:nth-child(9) { transform: rotate(240deg); animation-delay: -0.3s; }
        .lds-spinner div:nth-child(10){ transform: rotate(270deg); animation-delay: -0.2s; }
        .lds-spinner div:nth-child(11){ transform: rotate(300deg); animation-delay: -0.1s; }
        .lds-spinner div:nth-child(12){ transform: rotate(330deg); animation-delay: 0s; }

        @keyframes lds-spinner {
            0% { opacity: 1; }
            100% { opacity: 0; }
        }
    </style>
</head>

<body>
    <div id="controls-modal" class="modal-overlay">
        <div class="modal-content">
            <span class="modal-close">&times;</span>
            <h2>Controls</h2>
            <ul class="gui_controls">
                <li><span class="gui_controls_key">Launch Ball</span> <span>SPACE</span></li>
                <li><span class="gui_controls_key">Left Flipper</span> <span>Z</span></li>
                <li><span class="gui_controls_key">Right Flipper</span> <span>C</span></li>
                <li><span class="gui_controls_key">Tilt Table</span> <span>X</span></li>
                <li><span class="gui_controls_key">Restart Game</span> <span>R</span></li>
                <li><span class="gui_controls_key">Toggle Sound</span> <span>T</span></li>
            </ul>
        </div>
    </div>

    <div class="pleasewait">
        <div class="lds-spinner">
            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>
        </div>
    </div>
    <canvas id="canvas"></canvas>
    <div class="gui_container">
        <div class="gui_background"></div>
        <div class="gui_start"></div>
        <div id="help-btn" class="text-btn">Help</div>
    </div>
    <script>
        function getBooleanSetting(settingName) { try { var name = "pinballspacecadet" + settingName; var nameEQ = name + "="; var ca = document.cookie.split(";"); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == " ") { c = c.substring(1, c.length); } if (c.indexOf(nameEQ) == 0) { if (c.substring(nameEQ.length, c.length) == "true") { return true; } else { return false; } } } } catch (err) { } return true; }
        function setBooleanSetting(settingName, settingValue) { try { var name = "pinballspacecadet" + settingName; var value = String(settingValue); var days = 999; var expires = ""; if (days) { var date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); expires = "; expires=" + date.toUTCString() + "; SameSite=Lax"; } document.cookie = name + "=" + (value || "") + expires + "; Secure; path=/"; } catch (err) { } }

        var Module = {
            preRun: [],
            postRun: [],
            print: function () { }(),
            printErr: function (e) { },
            canvas: function () { var e = document.getElementById("canvas"); return e.addEventListener("webglcontextlost", (function (e) { }), !1), e }(),
            setStatus: function (e) {
                if (!e) {
                    var spinner = document.getElementsByClassName("pleasewait")[0];
                    if(spinner) spinner.style.display = "none";
                }
            },
            totalDependencies: 0,
            monitorRunDependencies: function (e) { }
        };

        var GAME_SOUND_ENABLED = getBooleanSetting("GAME_SOUND_ENABLED");

        document.addEventListener("keydown", function (event) {
            if (event.key === "c") {
                const keySlash = new KeyboardEvent("keydown", { key: "/", code: "Slash", which: 191, keyCode: 191, shiftKey: false, ctrlKey: false, altKey: false, metaKey: false, bubbles: true, cancelable: true });
                document.getElementById("canvas").dispatchEvent(keySlash);
            }
            else if (event.key === "r") {
                const keyF2 = new KeyboardEvent("keydown", { key: "F2", code: "F2", which: 113, keyCode: 113, shiftKey: false, ctrlKey: false, altKey: false, metaKey: false, bubbles: true, cancelable: true });
                document.getElementById("canvas").dispatchEvent(keyF2);
            }
        });

        document.addEventListener("keyup", function (event) {
            if (event.key === "c") {
                const keySlash = new KeyboardEvent("keyup", { key: "/", code: "Slash", which: 191, keyCode: 191, shiftKey: false, ctrlKey: false, altKey: false, metaKey: false, bubbles: true, cancelable: true });
                document.getElementById("canvas").dispatchEvent(keySlash);
            }
            else if (event.key === "r") {
                const keyF2 = new KeyboardEvent("keyup", { key: "F2", code: "F2", which: 113, keyCode: 113, shiftKey: false, ctrlKey: false, altKey: false, metaKey: false, bubbles: true, cancelable: true });
                document.getElementById("canvas").dispatchEvent(keyF2);
            }
            else if (event.key === "t") {
                if (!Module.SDL2) {
                    return;
                }

                GAME_SOUND_ENABLED = !GAME_SOUND_ENABLED;
                setBooleanSetting("GAME_SOUND_ENABLED", GAME_SOUND_ENABLED);

                try {
                    if (!GAME_SOUND_ENABLED) {
                        Module.SDL2.audioContext.suspend();
                    }
                    else {
                        Module.SDL2.audioContext.resume();
                    }
                } catch (err) {
                }
            }
        });

        document.getElementById("canvas").addEventListener("contextmenu", function (event) {
            event.preventDefault();
        });

        window.addEventListener("load", function () {
            document.getElementById("canvas").style.height = (window.innerHeight + 20) + "px";

            // CHECKING IF THE GAME IS RUNNING WITHIN AN IFRAME
            if (window.top != window.self) {
                document.getElementsByClassName("gui_start")[0].addEventListener("click", function (event) {
                    document.getElementsByClassName("gui_container")[0].style.display = "none";
                    document.getElementsByClassName("pleasewait")[0].style.display = "block";

                    const scriptGame = document.createElement("script");
                    scriptGame.src = "/static/third-party/apps/3dpinballspacecadet.app/3DPinballSpaceCadet.js";
                    document.getElementsByTagName("body")[0].appendChild(scriptGame);
                });
            }
        });

        window.addEventListener("resize", function () {
            document.getElementById("canvas").style.height = (window.innerHeight + 20) + "px";
        });

        // --- NEW: Modal Control Logic ---
        document.addEventListener('DOMContentLoaded', (event) => {
            const modal = document.getElementById('controls-modal');
            const helpBtn = document.getElementById('help-btn');
            const closeBtn = document.querySelector('.modal-close');

            const openModal = () => modal.style.display = 'flex';
            const closeModal = () => modal.style.display = 'none';

            helpBtn.addEventListener('click', openModal);
            closeBtn.addEventListener('click', closeModal);

            // Close modal if user clicks on the overlay background
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModal();
                }
            });
        });

    </script>
</body>
</html>
